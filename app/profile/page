'use client';

import { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabaseClient';

type Profile = {
  id: string;
  username: string | null;
  full_name: string | null;
  phone: string | null;
  avatar_url: string | null;
};

export default function ProfilePage() {
  const router = useRouter();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  const [userId, setUserId] = useState<string>('');
  const [username, setUsername] = useState('');
  const [fullName, setFullName] = useState('');
  const [phone, setPhone] = useState('');
  const [avatarUrl, setAvatarUrl] = useState('');

  const usernameRegex = useMemo(() => /^[a-z0-9_]{3,20}$/, []);
  const usernameOk = usernameRegex.test(username);

  // 1) Cargar sesión y perfil
  useEffect(() => {
    (async () => {
      setLoading(true);
      setMsg(null);
      try {
        const { data: s, error: sErr } = await supabase.auth.getUser();
        if (sErr) throw sErr;
        const u = s.user;
        if (!u) {
          router.replace('/login');
          return;
        }
        setUserId(u.id);

        // Traer perfil
        const { data: pRows, error: pErr } = await supabase
          .from('profiles')
          .select('id, username, full_name, phone, avatar_url')
          .eq('id', u.id)
          .maybeSingle();

        if (pErr) throw pErr;

        const p: Profile | null = (pRows as any) ?? null;

        setUsername((p?.username ?? '').toString());
        setFullName((p?.full_name ?? '').toString());
        setPhone((p?.phone ?? '').toString());
        setAvatarUrl((p?.avatar_url ?? '').toString());
      } catch (e: any) {
        setMsg(e.message ?? 'Error cargando perfil');
      } finally {
        setLoading(false);
      }
    })();
  }, [router]);

  // 2) Guardar cambios (con validación de username único)
  async function handleSave() {
    try {
      setSaving(true);
      setMsg(null);

      const uname = username.trim().toLowerCase();
      if (!usernameRegex.test(uname)) {
        throw new Error(
          'El usuario debe tener 3–20 caracteres, solo minúsculas, números o guion bajo.'
        );
      }

      // ¿Username disponible?
      const { data: existRows, error: exErr } = await supabase
        .from('profiles')
        .select('id')
        .eq('username', uname)
        .neq('id', userId)
        .limit(1);

      if (exErr) throw exErr;
      if (existRows && existRows.length > 0) {
        throw new Error('Ese nombre de usuario ya está en uso.');
      }

      // Guardar (UPSERT)
      const { error: upErr } = await supabase.from('profiles').upsert(
        [
          {
            id: userId,
            username: uname,
            full_name: fullName || null,
            phone: phone || null,
            avatar_url: avatarUrl || null,
          },
        ],
        { onConflict: 'id' }
      );

      if (upErr) throw upErr;

      setMsg('Perfil guardado correctamente.');
      // Si quieres llevar al inicio después de guardar:
      // router.push('/');
    } catch (e: any) {
      setMsg(e.message ?? 'No se pudo guardar el perfil');
    } finally {
      setSaving(false);
    }
  }

  if (loading) {
    return (
      <main className="max-w-xl mx-auto p-6">
        <h1 className="text-2xl font-semibold mb-4">Mi perfil</h1>
        <p>Cargando…</p>
      </main>
    );
  }

  return (
    <main className="max-w-xl mx-auto p-6">
      <h1 className="text-2xl font-semibold mb-4">Mi perfil</h1>

      {msg && (
        <p
          className={
            msg.toLowerCase().includes('error') ? 'text-red-600 mb-4' : 'text-green-700 mb-4'
          }
        >
          {msg}
        </p>
      )}

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">Usuario *</label>
          <input
            className="w-full rounded border px-3 py-2"
            placeholder="tu_usuario"
            value={username}
            onChange={(e) => setUsername(e.target.value.toLowerCase())}
          />
          <p className={`text-xs mt-1 ${usernameOk ? 'text-neutral-500' : 'text-red-600'}`}>
            {usernameOk
              ? '3–20 (a–z, 0–9, _). Se guardará en minúsculas.'
              : 'Formato inválido: usa solo minúsculas, números o _. Longitud 3–20.'}
          </p>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Nombre</label>
          <input
            className="w-full rounded border px-3 py-2"
            placeholder="Tu nombre"
            value={fullName}
            onChange={(e) => setFullName(e.target.value)}
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Teléfono</label>
          <input
            className="w-full rounded border px-3 py-2"
            placeholder="+57 300 000 0000"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Avatar URL</label>
          <input
            className="w-full rounded border px-3 py-2"
            placeholder="https://…/avatar.png"
            value={avatarUrl}
            onChange={(e) => setAvatarUrl(e.target.value)}
          />
          {avatarUrl ? (
            <img
              alt="avatar"
              src={avatarUrl}
              className="mt-2 h-16 w-16 rounded-full object-cover border"
            />
          ) : null}
        </div>

        <div className="pt-2">
          <button
            onClick={handleSave}
            disabled={saving || !usernameOk}
            className="rounded bg-black text-white px-4 py-2 disabled:opacity-50"
          >
            {saving ? 'Guardando…' : 'Guardar'}
          </button>
        </div>
      </div>
    </main>
  );
}
